#!/usr/bin/env python2
import rospy
from sensor_msgs.msg import JointState
from markers import *
from robot_functions import *

if __name__ == '__main__':

 rospy.init_node("testInvKine")
 pub = rospy.Publisher('joint_states', JointState, queue_size=1)

 bmarker      = BallMarker(color['RED'])
 bmarker_des  = BallMarker(color['GREEN'])

 jnames = ['joint_1', 'joint_2', 'joint_3','joint_4', 'joint_5', 'joint_6','joint_7','joint_8']
 xd = np.array([[-0.5,0.5,2.9]])
 #q0 = np.array([pi/3,-pi/6,pi/5,-pi/12,pi/12, pi/15,0,0])
 q0=np.array([0,0,0,0,0,0,0,0])
 q = ikine(xd, q0)

 T = fkine(q)
 print('Obtained value:\n\n', np.round(T,3))
 print('\n')
 print('config articular: \n', q)

 bmarker.xyz(T[0:3,3])
 bmarker_des.xyz(xd)


 #cosa del tipo JoinState()
 jstate = JointState()
 # Set values to the message
 jstate.header.stamp = rospy.Time.now()
 jstate.name = jnames
 # Add the head joint value (with value 0) to the joints
 jstate.position = q
 # Loop rate (in Hz)
 rate = rospy.Rate(100)
 # Continuous execution loop
 while not rospy.is_shutdown():
  # Current time (needed for ROS)
  jstate.header.stamp = rospy.Time.now()
  pub.publish(jstate)
  #bmarker.publish()
  bmarker.publish()
  bmarker_des.publish()
  # Wait for the next iteration
  rate.sleep()

